<%- contentFor('body') %>
<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="bi bi-geo-alt"></i> Zone Management</h2>
        <div class="btn-group">
            <a href="/admin/zones/new" class="btn btn-primary">
                <i class="bi bi-plus"></i> Add Zone
            </a>
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#importModal">
                <i class="bi bi-upload"></i> Import CSV
            </button>
            <a href="/admin/zones/export" class="btn btn-outline-secondary">
                <i class="bi bi-download"></i> Export All
            </a>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card stats-card">
                <div class="card-body">
                    <h5><i class="bi bi-geo text-primary"></i> Total Zones</h5>
                    <h2 class="mb-0"><%= zones.length %></h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card success">
                <div class="card-body">
                    <h5><i class="bi bi-check-circle text-success"></i> Active Zones</h5>
                    <h2 class="mb-0"><%= zones.filter(z => z.is_active).length %></h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card warning">
                <div class="card-body">
                    <h5><i class="bi bi-shop text-info"></i> Total Restaurants</h5>
                    <h2 class="mb-0"><%= zones.reduce((sum, z) => sum + parseInt(z.restaurant_count || 0), 0).toLocaleString() %></h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stats-card danger">
                <div class="card-body">
                    <h5><i class="bi bi-envelope text-warning"></i> Emails Found</h5>
                    <h2 class="mb-0"><%= zones.reduce((sum, z) => sum + parseInt(z.email_count || 0), 0).toLocaleString() %></h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-2">
                    <select id="countryFilter" class="form-select">
                        <option value="">All Countries</option>
                        <option value="US">United States</option>
                        <option value="CA">Canada</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="stateFilter" class="form-select">
                        <option value="">All States</option>
                        <% [...new Set(zones.map(z => z.state))].forEach(state => { %>
                        <option value="<%= state %>"><%= state %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="priorityFilter" class="form-select">
                        <option value="">All Priorities</option>
                        <option value="1">High Priority</option>
                        <option value="2">Medium Priority</option>
                        <option value="3">Low Priority</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="statusFilter" class="form-select">
                        <option value="">All Status</option>
                        <option value="active">Active Only</option>
                        <option value="inactive">Inactive Only</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <input type="search" id="searchZones" class="form-control" placeholder="Search zones...">
                </div>
            </div>
        </div>
    </div>

    <!-- Zones Table -->
    <div class="card">
        <div class="card-body">
            <table id="zonesTable" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Zone</th>
                        <th>Location</th>
                        <th>Coverage</th>
                        <th>Restaurants</th>
                        <th>Priority</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% zones.forEach(zone => { %>
                    <tr data-zone-id="<%= zone.id %>" class="<%= zone.is_active ? '' : 'table-secondary' %>">
                        <td>
                            <strong><%= zone.display_name %></strong><br>
                            <small class="text-muted"><%= zone.zone_code %></small>
                            <% if (zone.notes) { %>
                            <br><small class="text-info" title="<%= zone.notes %>"><%= zone.notes.substring(0, 50) %>...</small>
                            <% } %>
                        </td>
                        <td>
                            <%= zone.city %>, <%= zone.state %><br>
                            <small class="text-muted">
                                <%= parseFloat(zone.latitude).toFixed(4) %>, <%= parseFloat(zone.longitude).toFixed(4) %>
                                | R: <%= (zone.radius_meters/1000).toFixed(1) %>km
                            </small>
                        </td>
                        <td>
                            <% 
                            const restaurantCount = parseInt(zone.restaurant_count) || 0;
                            const emailCount = parseInt(zone.email_count) || 0;
                            const coverage = restaurantCount > 0 ? ((emailCount / restaurantCount) * 100).toFixed(1) : 0;
                            %>
                            <div class="progress" style="height: 20px;">
                                <div class="progress-bar <%= coverage > 50 ? 'bg-success' : coverage > 25 ? 'bg-warning' : 'bg-danger' %>" 
                                     style="width: <%= coverage %>%">
                                    <%= coverage %>%
                                </div>
                            </div>
                            <small class="text-muted">
                                <%= emailCount %>/<%= restaurantCount %> emails
                            </small>
                        </td>
                        <td class="text-center">
                            <span class="badge bg-primary fs-6"><%= restaurantCount.toLocaleString() %></span>
                            <% if (parseInt(zone.website_count) > 0) { %>
                            <br><small class="text-success"><%= zone.website_count %> websites</small>
                            <% } %>
                        </td>
                        <td>
                            <span class="badge bg-<%= zone.priority === 1 ? 'danger' : zone.priority === 2 ? 'warning' : 'secondary' %>">
                                <%= zone.priority === 1 ? 'High' : zone.priority === 2 ? 'Medium' : 'Low' %>
                            </span>
                        </td>
                        <td>
                            <% if (zone.is_active) { %>
                            <span class="badge bg-success">Active</span>
                            <% } else { %>
                            <span class="badge bg-secondary">Inactive</span>
                            <% } %>
                        </td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="/admin/zones/<%= zone.id %>/edit" class="btn btn-outline-primary" title="Edit">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button class="btn btn-outline-success" onclick="startScraping('<%= zone.id %>')" title="Start Scraping">
                                    <i class="bi bi-arrow-clockwise"></i>
                                </button>
                                <button class="btn btn-outline-warning" onclick="duplicateZone('<%= zone.id %>')" title="Duplicate">
                                    <i class="bi bi-files"></i>
                                </button>
                                <button class="btn btn-outline-<%= zone.is_active ? 'secondary' : 'success' %>" 
                                        onclick="toggleZoneStatus('<%= zone.id %>')" title="Toggle Status">
                                    <i class="bi bi-<%= zone.is_active ? 'pause' : 'play' %>"></i>
                                </button>
                                <button class="btn btn-outline-danger" onclick="deleteZone('<%= zone.id %>')" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Import Modal -->
<div class="modal fade" id="importModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form action="/admin/zones/bulk-import" method="POST" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-upload"></i> Import Zones from CSV</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">CSV File</label>
                        <input type="file" name="csvFile" class="form-control" accept=".csv" required>
                        <div class="form-text">
                            Required columns: display_name, city, state, latitude, longitude<br>
                            Optional: country, radius_meters, priority, search_terms, cuisine_focus, notes
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <h6><i class="bi bi-info-circle"></i> CSV Format Example:</h6>
                        <code>display_name,city,state,latitude,longitude,radius_meters,priority,notes<br>
                        "Miami Beach, FL",Miami Beach,FL,25.7907,-80.1300,8000,1,"Tourist area"</code>
                    </div>
                    
                    <div class="mb-3">
                        <a href="/admin/zones/sample.csv" class="btn btn-sm btn-outline-info">
                            <i class="bi bi-download"></i> Download Sample CSV
                        </a>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <span class="btn-text">Import Zones</span>
                        <span class="loading-spinner spinner-border spinner-border-sm" role="status"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<%- contentFor('pageJS') %>
$(document).ready(function() {
    // Initialize DataTable
    const table = $('#zonesTable').DataTable({
        pageLength: 25,
        responsive: true,
        order: [[4, 'asc'], [0, 'asc']], // Order by priority, then name
        columnDefs: [
            { orderable: false, targets: [-1] } // Disable sorting on Actions column
        ],
        language: {
            search: "",
            searchPlaceholder: "Search zones..."
        }
    });
    
    // Filter functionality
    $('#countryFilter, #stateFilter, #priorityFilter, #statusFilter').on('change', function() {
        applyFilters();
    });
    
    $('#searchZones').on('keyup', function() {
        table.search(this.value).draw();
    });
    
    function applyFilters() {
        const country = $('#countryFilter').val();
        const state = $('#stateFilter').val(); 
        const priority = $('#priorityFilter').val();
        const status = $('#statusFilter').val();
        
        table.columns().search('').draw(); // Clear previous filters
        
        if (country) table.column(1).search(country, true, false);
        if (state) table.column(1).search(state, true, false);
        if (priority) table.column(4).search(priority === '1' ? 'High' : priority === '2' ? 'Medium' : 'Low', true, false);
        if (status) table.column(5).search(status === 'active' ? 'Active' : 'Inactive', true, false);
        
        table.draw();
    }
    
    // Import form handling
    $('form[action="/admin/zones/bulk-import"]').on('submit', function() {
        setButtonLoading($(this).find('button[type="submit"]'), true);
    });
});

// Zone management functions
async function startScraping(zoneId) {
    if (!confirmAction('Start scraping for this zone?')) return;
    
    try {
        const data = await apiCall(`/api/scraping/start/${zoneId}`, { method: 'POST' });
        if (data.success) {
            alert('Scraping started successfully!');
            window.location.href = '/scraping';
        }
    } catch (error) {
        alert('Error starting scraping: ' + error.message);
    }
}

async function duplicateZone(zoneId) {
    const newName = prompt('Enter name for the duplicated zone:');
    if (!newName) return;
    
    try {
        const data = await apiCall(`/admin/zones/${zoneId}/duplicate`, {
            method: 'POST',
            body: JSON.stringify({ display_name: newName })
        });
        
        if (data.success) {
            alert('Zone duplicated successfully!');
            location.reload();
        }
    } catch (error) {
        alert('Error duplicating zone: ' + error.message);
    }
}

async function toggleZoneStatus(zoneId) {
    try {
        const data = await apiCall(`/admin/zones/${zoneId}/toggle-status`, { method: 'POST' });
        if (data.success) {
            location.reload();
        }
    } catch (error) {
        alert('Error toggling zone status: ' + error.message);
    }
}

async function deleteZone(zoneId) {
    if (!confirmAction('Are you sure you want to delete this zone? This action cannot be undone and will also delete all associated restaurants.')) return;
    
    try {
        const data = await apiCall(`/admin/zones/${zoneId}`, { method: 'DELETE' });
        if (data.success) {
            alert('Zone deleted successfully!');
            location.reload();
        }
    } catch (error) {
        alert('Error deleting zone: ' + error.message);
    }
}